nohup: ignoring input
/data/tf/lib/python3.12/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/data/tf/lib/python3.12/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=ResNet50_Weights.IMAGENET1K_V1`. You can also use `weights=ResNet50_Weights.DEFAULT` to get the most up-to-date weights.
  warnings.warn(msg)
Min label: 4, Max label: 162
Expected label range: [0, 74]
Number of classes: 75
Training dataset size: 10434
Validation dataset size: 2609
Test dataset size: 12190
Using device: cuda
ResNet(
  (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
  (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
  (relu): ReLU(inplace=True)
  (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
  (layer1): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer2): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer3): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (3): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (4): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (5): Bottleneck(
      (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (layer4): Sequential(
    (0): Bottleneck(
      (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
      (downsample): Sequential(
        (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
    (1): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
    (2): Bottleneck(
      (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu): ReLU(inplace=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (fc): Linear(in_features=2048, out_features=75, bias=True)
)/data/tf/lib/python3.12/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)

Model loaded successfully!
Saving train images:   0%|          | 0/10434 [00:00<?, ?it/s]Saving train images:   1%|          | 128/10434 [00:06<08:34, 20.03it/s]Saving train images:   2%|▏         | 256/10434 [00:08<04:50, 35.06it/s]Saving train images:   4%|▎         | 384/10434 [00:09<03:38, 46.08it/s]Saving train images:   5%|▍         | 512/10434 [00:11<03:02, 54.32it/s]Saving train images:   6%|▌         | 640/10434 [00:13<02:42, 60.13it/s]Saving train images:   7%|▋         | 768/10434 [00:14<02:29, 64.54it/s]Saving train images:   9%|▊         | 896/10434 [00:16<02:21, 67.41it/s]Saving train images:  10%|▉         | 1024/10434 [00:18<02:14, 69.89it/s]Saving train images:  11%|█         | 1152/10434 [00:20<02:10, 71.27it/s]Saving train images:  12%|█▏        | 1280/10434 [00:21<02:06, 72.54it/s]Saving train images:  13%|█▎        | 1408/10434 [00:23<02:03, 73.27it/s]Saving train images:  15%|█▍        | 1536/10434 [00:25<02:02, 72.83it/s]Saving train images:  16%|█▌        | 1664/10434 [00:27<01:59, 73.50it/s]Saving train images:  17%|█▋        | 1792/10434 [00:28<01:57, 73.28it/s]Saving train images:  18%|█▊        | 1920/10434 [00:30<01:55, 73.61it/s]Saving train images:  20%|█▉        | 2048/10434 [00:32<01:53, 73.90it/s]Saving train images:  21%|██        | 2176/10434 [00:33<01:52, 73.51it/s]Saving train images:  22%|██▏       | 2304/10434 [00:35<01:51, 73.24it/s]Saving train images:  23%|██▎       | 2432/10434 [00:37<01:48, 73.53it/s]Saving train images:  25%|██▍       | 2560/10434 [00:39<01:46, 74.06it/s]Saving train images:  26%|██▌       | 2688/10434 [00:47<03:48, 33.88it/s]Saving train images:  27%|██▋       | 2816/10434 [00:50<03:34, 35.53it/s]Saving train images:  28%|██▊       | 2944/10434 [00:54<03:37, 34.40it/s]Saving train images:  29%|██▉       | 3072/10434 [00:59<03:43, 32.91it/s]Saving train images:  31%|███       | 3200/10434 [01:06<04:36, 26.21it/s]Saving train images:  32%|███▏      | 3328/10434 [01:17<06:15, 18.91it/s]Saving train images:  33%|███▎      | 3456/10434 [01:21<05:20, 21.80it/s]Saving train images:  34%|███▍      | 3584/10434 [01:23<04:08, 27.60it/s]Saving train images:  36%|███▌      | 3712/10434 [01:24<03:16, 34.23it/s]Saving train images:  37%|███▋      | 3840/10434 [01:26<02:47, 39.41it/s]Saving train images:  38%|███▊      | 3968/10434 [01:28<02:20, 45.87it/s]Saving train images:  39%|███▉      | 4096/10434 [01:30<02:02, 51.68it/s]Saving train images:  40%|████      | 4224/10434 [01:32<01:49, 56.96it/s]Saving train images:  42%|████▏     | 4352/10434 [01:35<01:59, 50.75it/s]Saving train images:  43%|████▎     | 4480/10434 [01:36<01:46, 55.69it/s]Saving train images:  44%|████▍     | 4608/10434 [01:38<01:36, 60.37it/s]Saving train images:  45%|████▌     | 4736/10434 [01:40<01:29, 63.78it/s]Saving train images:  47%|████▋     | 4864/10434 [01:42<01:23, 66.53it/s]Saving train images:  48%|████▊     | 4992/10434 [01:43<01:19, 68.38it/s]Saving train images:  49%|████▉     | 5120/10434 [01:45<01:16, 69.18it/s]Saving train images:  50%|█████     | 5248/10434 [01:47<01:13, 70.95it/s]Saving train images:  52%|█████▏    | 5376/10434 [01:49<01:10, 71.32it/s]Saving train images:  53%|█████▎    | 5504/10434 [01:50<01:07, 72.55it/s]Saving train images:  54%|█████▍    | 5632/10434 [01:52<01:05, 73.63it/s]Saving train images:  55%|█████▌    | 5760/10434 [01:54<01:03, 73.20it/s]Saving train images:  56%|█████▋    | 5888/10434 [01:56<01:01, 73.59it/s]Saving train images:  58%|█████▊    | 6016/10434 [01:59<01:13, 60.14it/s]Saving train images:  59%|█████▉    | 6144/10434 [02:01<01:18, 54.48it/s]Saving train images:  60%|██████    | 6272/10434 [02:05<01:27, 47.52it/s]Saving train images:  61%|██████▏   | 6400/10434 [02:09<01:40, 40.31it/s]Saving train images:  63%|██████▎   | 6528/10434 [02:11<01:23, 46.64it/s]Saving train images:  64%|██████▍   | 6656/10434 [02:13<01:11, 52.78it/s]Saving train images:  65%|██████▌   | 6784/10434 [02:14<01:03, 57.62it/s]Saving train images:  66%|██████▌   | 6912/10434 [02:16<00:59, 59.62it/s]Saving train images:  67%|██████▋   | 7040/10434 [02:18<00:53, 63.56it/s]Saving train images:  69%|██████▊   | 7168/10434 [02:20<00:50, 64.38it/s]Saving train images:  70%|██████▉   | 7296/10434 [02:22<00:46, 67.30it/s]Saving train images:  71%|███████   | 7424/10434 [02:23<00:43, 69.52it/s]Saving train images:  72%|███████▏  | 7552/10434 [02:25<00:40, 70.91it/s]Saving train images:  74%|███████▎  | 7680/10434 [02:27<00:37, 72.51it/s]Saving train images:  75%|███████▍  | 7808/10434 [02:28<00:35, 73.53it/s]Saving train images:  76%|███████▌  | 7936/10434 [02:30<00:33, 74.04it/s]Saving train images:  77%|███████▋  | 8064/10434 [02:32<00:31, 74.26it/s]Saving train images:  79%|███████▊  | 8192/10434 [02:34<00:29, 74.83it/s]Saving train images:  80%|███████▉  | 8320/10434 [02:35<00:28, 73.49it/s]Saving train images:  81%|████████  | 8448/10434 [02:37<00:26, 73.67it/s]Saving train images:  82%|████████▏ | 8576/10434 [02:39<00:25, 74.26it/s]Saving train images:  83%|████████▎ | 8704/10434 [02:41<00:23, 74.41it/s]Saving train images:  85%|████████▍ | 8832/10434 [02:42<00:21, 74.66it/s]Saving train images:  86%|████████▌ | 8960/10434 [02:44<00:19, 75.08it/s]Saving train images:  87%|████████▋ | 9088/10434 [02:46<00:18, 73.82it/s]Saving train images:  88%|████████▊ | 9216/10434 [02:47<00:16, 74.50it/s]Saving train images:  90%|████████▉ | 9344/10434 [02:49<00:14, 74.68it/s]Saving train images:  91%|█████████ | 9472/10434 [02:51<00:13, 72.16it/s]Saving train images:  92%|█████████▏| 9600/10434 [02:53<00:11, 73.37it/s]Saving train images:  93%|█████████▎| 9728/10434 [02:54<00:09, 73.88it/s]Saving train images:  94%|█████████▍| 9856/10434 [02:56<00:08, 72.24it/s]Saving train images:  96%|█████████▌| 9984/10434 [02:58<00:06, 73.16it/s]Saving train images:  97%|█████████▋| 10112/10434 [03:00<00:04, 74.17it/s]Saving train images:  98%|█████████▊| 10240/10434 [03:02<00:02, 70.56it/s]Saving train images:  99%|█████████▉| 10368/10434 [03:03<00:00, 72.03it/s]Saving train images: 100%|██████████| 10434/10434 [03:04<00:00, 72.46it/s]Saving train images: 100%|██████████| 10434/10434 [03:04<00:00, 56.49it/s]
Saving validation images:   0%|          | 0/2609 [00:00<?, ?it/s]Saving validation images:   5%|▍         | 128/2609 [00:04<01:33, 26.49it/s]Saving validation images:  10%|▉         | 256/2609 [00:06<00:55, 42.51it/s]Saving validation images:  15%|█▍        | 384/2609 [00:08<00:42, 52.49it/s]Saving validation images:  20%|█▉        | 512/2609 [00:10<00:39, 52.69it/s]Saving validation images:  25%|██▍       | 640/2609 [00:12<00:33, 58.89it/s]Saving validation images:  29%|██▉       | 768/2609 [00:14<00:28, 63.64it/s]Saving validation images:  34%|███▍      | 896/2609 [00:16<00:26, 65.28it/s]Saving validation images:  39%|███▉      | 1024/2609 [00:17<00:23, 66.95it/s]Saving validation images:  44%|████▍     | 1152/2609 [00:19<00:21, 67.55it/s]Saving validation images:  49%|████▉     | 1280/2609 [00:21<00:19, 69.25it/s]Saving validation images:  54%|█████▍    | 1408/2609 [00:23<00:17, 70.15it/s]Saving validation images:  59%|█████▉    | 1536/2609 [00:25<00:15, 67.75it/s]Saving validation images:  64%|██████▍   | 1664/2609 [00:27<00:13, 69.01it/s]Saving validation images:  69%|██████▊   | 1792/2609 [00:28<00:11, 70.35it/s]Saving validation images:  74%|███████▎  | 1920/2609 [00:30<00:09, 70.01it/s]Saving validation images:  78%|███████▊  | 2048/2609 [00:32<00:07, 70.84it/s]Saving validation images:  83%|████████▎ | 2176/2609 [00:34<00:06, 70.35it/s]Saving validation images:  88%|████████▊ | 2304/2609 [00:36<00:04, 69.75it/s]Saving validation images:  93%|█████████▎| 2432/2609 [00:37<00:02, 70.45it/s]Saving validation images:  98%|█████████▊| 2560/2609 [00:39<00:00, 71.03it/s]Saving validation images: 100%|██████████| 2609/2609 [00:40<00:00, 69.84it/s]Saving validation images: 100%|██████████| 2609/2609 [00:40<00:00, 64.60it/s]
Saving test images:   0%|          | 0/12190 [00:00<?, ?it/s]Saving test images:   1%|          | 128/12190 [00:07<11:34, 17.36it/s]Saving test images:   2%|▏         | 256/12190 [00:09<06:20, 31.36it/s]Saving test images:   3%|▎         | 384/12190 [00:10<04:39, 42.22it/s]Saving test images:   4%|▍         | 512/12190 [00:12<03:50, 50.58it/s]Saving test images:   5%|▌         | 640/12190 [00:14<03:23, 56.68it/s]Saving test images:   6%|▋         | 768/12190 [00:16<03:18, 57.64it/s]Saving test images:   7%|▋         | 896/12190 [00:18<03:02, 61.77it/s]Saving test images:   8%|▊         | 1024/12190 [00:20<02:56, 63.39it/s]Saving test images:   9%|▉         | 1152/12190 [00:22<02:47, 66.09it/s]Saving test images:  11%|█         | 1280/12190 [00:23<02:40, 68.03it/s]Saving test images:  12%|█▏        | 1408/12190 [00:26<02:49, 63.62it/s]Saving test images:  13%|█▎        | 1536/12190 [00:27<02:41, 65.83it/s]Saving test images:  14%|█▎        | 1664/12190 [00:29<02:36, 67.32it/s]Saving test images:  15%|█▍        | 1792/12190 [00:31<02:31, 68.47it/s]Saving test images:  16%|█▌        | 1920/12190 [00:33<02:27, 69.45it/s]Saving test images:  17%|█▋        | 2048/12190 [00:35<02:32, 66.60it/s]Saving test images:  18%|█▊        | 2176/12190 [00:37<02:27, 67.99it/s]Saving test images:  19%|█▉        | 2304/12190 [00:38<02:22, 69.28it/s]Saving test images:  20%|█▉        | 2432/12190 [00:41<02:33, 63.42it/s]Saving test images:  21%|██        | 2560/12190 [00:43<02:26, 65.70it/s]Saving test images:  22%|██▏       | 2688/12190 [00:45<02:25, 65.30it/s]Saving test images:  23%|██▎       | 2816/12190 [00:46<02:20, 66.68it/s]Saving test images:  24%|██▍       | 2944/12190 [00:48<02:15, 68.20it/s]Saving test images:  25%|██▌       | 3072/12190 [00:51<02:22, 64.11it/s]Saving test images:  26%|██▋       | 3200/12190 [00:52<02:16, 66.06it/s]Saving test images:  27%|██▋       | 3328/12190 [00:54<02:11, 67.46it/s]Saving test images:  28%|██▊       | 3456/12190 [00:56<02:07, 68.52it/s]Saving test images:  29%|██▉       | 3584/12190 [00:58<02:05, 68.42it/s]Saving test images:  30%|███       | 3712/12190 [01:00<02:06, 66.82it/s]Saving test images:  32%|███▏      | 3840/12190 [01:02<02:09, 64.36it/s]Saving test images:  33%|███▎      | 3968/12190 [01:04<02:08, 64.18it/s]Saving test images:  34%|███▎      | 4096/12190 [01:06<02:16, 59.48it/s]Saving test images:  35%|███▍      | 4224/12190 [01:08<02:06, 62.98it/s]Saving test images:  36%|███▌      | 4352/12190 [01:10<02:00, 65.25it/s]Saving test images:  37%|███▋      | 4480/12190 [01:12<01:54, 67.49it/s]Saving test images:  38%|███▊      | 4608/12190 [01:14<01:49, 69.39it/s]Saving test images:  39%|███▉      | 4736/12190 [01:16<01:50, 67.64it/s]Saving test images:  40%|███▉      | 4864/12190 [01:17<01:46, 68.87it/s]Saving test images:  41%|████      | 4992/12190 [01:19<01:42, 70.09it/s]Saving test images:  42%|████▏     | 5120/12190 [01:21<01:41, 69.77it/s]Saving test images:  43%|████▎     | 5248/12190 [01:23<01:38, 70.45it/s]Saving test images:  44%|████▍     | 5376/12190 [01:24<01:36, 70.65it/s]Saving test images:  45%|████▌     | 5504/12190 [01:26<01:34, 70.54it/s]Saving test images:  46%|████▌     | 5632/12190 [01:28<01:31, 71.73it/s]Saving test images:  47%|████▋     | 5760/12190 [01:30<01:29, 72.08it/s]Saving test images:  48%|████▊     | 5888/12190 [01:32<01:27, 71.81it/s]Saving test images:  49%|████▉     | 6016/12190 [01:33<01:26, 71.58it/s]Saving test images:  50%|█████     | 6144/12190 [01:35<01:24, 71.76it/s]Saving test images:  51%|█████▏    | 6272/12190 [01:37<01:22, 72.05it/s]Saving test images:  53%|█████▎    | 6400/12190 [01:39<01:20, 72.22it/s]Saving test images:  54%|█████▎    | 6528/12190 [01:40<01:18, 72.46it/s]Saving test images:  55%|█████▍    | 6656/12190 [01:43<01:32, 59.83it/s]Saving test images:  56%|█████▌    | 6784/12190 [01:45<01:25, 62.87it/s]Saving test images:  57%|█████▋    | 6912/12190 [01:47<01:20, 65.22it/s]Saving test images:  58%|█████▊    | 7040/12190 [01:49<01:17, 66.56it/s]Saving test images:  59%|█████▉    | 7168/12190 [01:51<01:13, 67.91it/s]Saving test images:  60%|█████▉    | 7296/12190 [01:54<01:25, 57.01it/s]Saving test images:  61%|██████    | 7424/12190 [01:55<01:18, 61.09it/s]Saving test images:  62%|██████▏   | 7552/12190 [01:58<01:17, 59.64it/s]Saving test images:  63%|██████▎   | 7680/12190 [02:00<01:12, 61.89it/s]Saving test images:  64%|██████▍   | 7808/12190 [02:03<01:28, 49.61it/s]Saving test images:  65%|██████▌   | 7936/12190 [02:05<01:17, 54.63it/s]Saving test images:  66%|██████▌   | 8064/12190 [02:07<01:10, 58.26it/s]Saving test images:  67%|██████▋   | 8192/12190 [02:09<01:05, 61.24it/s]Saving test images:  68%|██████▊   | 8320/12190 [02:11<01:00, 64.19it/s]Saving test images:  69%|██████▉   | 8448/12190 [02:13<00:58, 63.60it/s]Saving test images:  70%|███████   | 8576/12190 [02:14<00:54, 65.87it/s]Saving test images:  71%|███████▏  | 8704/12190 [02:17<01:01, 56.89it/s]Saving test images:  72%|███████▏  | 8832/12190 [02:19<00:55, 60.65it/s]Saving test images:  74%|███████▎  | 8960/12190 [02:21<00:50, 63.59it/s]Saving test images:  75%|███████▍  | 9088/12190 [02:23<00:48, 63.67it/s]Saving test images:  76%|███████▌  | 9216/12190 [02:25<00:45, 65.94it/s]Saving test images:  77%|███████▋  | 9344/12190 [02:27<00:43, 65.18it/s]Saving test images:  78%|███████▊  | 9472/12190 [02:29<00:40, 67.06it/s]Saving test images:  79%|███████▉  | 9600/12190 [02:30<00:37, 68.51it/s]Saving test images:  80%|███████▉  | 9728/12190 [02:33<00:38, 63.44it/s]Saving test images:  81%|████████  | 9856/12190 [02:35<00:35, 66.03it/s]Saving test images:  82%|████████▏ | 9984/12190 [02:36<00:32, 68.05it/s]Saving test images:  83%|████████▎ | 10112/12190 [02:38<00:30, 69.01it/s]Saving test images:  84%|████████▍ | 10240/12190 [02:40<00:27, 69.79it/s]Saving test images:  85%|████████▌ | 10368/12190 [02:42<00:25, 70.67it/s]Saving test images:  86%|████████▌ | 10496/12190 [02:44<00:25, 67.08it/s]Saving test images:  87%|████████▋ | 10624/12190 [02:45<00:22, 68.74it/s]Saving test images:  88%|████████▊ | 10752/12190 [02:47<00:20, 68.95it/s]Saving test images:  89%|████████▉ | 10880/12190 [02:49<00:18, 70.03it/s]Saving test images:  90%|█████████ | 11008/12190 [02:51<00:16, 70.08it/s]Saving test images:  91%|█████████▏| 11136/12190 [02:53<00:15, 65.96it/s]Saving test images:  92%|█████████▏| 11264/12190 [02:56<00:15, 58.06it/s]Saving test images:  93%|█████████▎| 11392/12190 [02:58<00:13, 61.27it/s]Saving test images:  95%|█████████▍| 11520/12190 [03:00<00:10, 61.36it/s]Saving test images:  96%|█████████▌| 11648/12190 [03:02<00:08, 64.40it/s]Saving test images:  97%|█████████▋| 11776/12190 [03:03<00:06, 66.47it/s]Saving test images:  98%|█████████▊| 11904/12190 [03:05<00:04, 68.54it/s]Saving test images:  99%|█████████▊| 12032/12190 [03:07<00:02, 69.76it/s]Saving test images: 100%|█████████▉| 12160/12190 [03:09<00:00, 70.08it/s]Saving test images: 100%|██████████| 12190/12190 [03:09<00:00, 70.25it/s]Saving test images: 100%|██████████| 12190/12190 [03:09<00:00, 64.30it/s]
Original and cropped images have been organized and saved to ./cropped_data/
